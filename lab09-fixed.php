<!DOCTYPE html>
<html>
<head>
  <?php require_once 'header.php'; ?>
</head>
<style>
* {
  box-sizing: border-box;
}

.header, .footer {
  background-color: grey;
  color: white;
  padding: 15px;
}

.column {
  float: left;
  padding: 15px;
}

.clearfix::after {
  content: "";
  clear: both;
  display: table;
}

.menu {
  width: 25%;
}

.content {
  width: 75%;
}

.menu ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

.menu li {
  padding: 8px;
  margin-bottom: 8px;
  background-color: #33b5e5;
  color: #ffffff;
}

.menu li:hover {
  background-color: #0099cc;
}
</style>
</head>
<body>
<div class="header">
  <h1>XSS Challenge 09 [Fixed]</h1>
</div>
<div class="clearfix">
  <div class="column menu">
    <ul>
      <li><a href="../index.php">Main Menu</a></li>
      <li><a href="lab01-fixed.php">Challenge 1</a></li>
      <li><a href="lab02-fixed.php">Challenge 2</a></li>
      <li><a href="lab03-fixed.php">Challenge 3</a></li>
      <li><a href="lab04-fixed.php">Challenge 4</a></li>
      <li><a href="lab05-fixed.php">Challenge 5</a></li>
      <li><a href="lab06-fixed.php">Challenge 6</a></li>
      <li><a href="lab07-fixed.php">Challenge 7</a></li>
      <li><a href="lab08-fixed.php">Challenge 8</a></li>
      <li><a href="lab09-fixed.php">Challenge 9</a></li>
      <li><a href="lab10-fixed.php">Challenge 10</a></li>
      <li><a href="lab11-fixed.php">Challenge 11</a></li>
      <li><a href="Displaying XSS Characters.html">XSS Characters Browser Display</a></li>
    </ul>
  </div>
  <div class="column content">
    <h1>Reflective XSS Over HTTP GET Request</h1>
    <p>Reflective XSS arises when a web application receives data in an HTTP request.</p>
    <p>The web application then includes that data within the response of the page returned by the web server in an unsafe manner resulting in unintentional code being included and executed by the browser.</p>
    <p><b>This is an unusual one, but you will see this form of XSS from time to time.</b></p>
  </div>
  <div class="column content">
    <?php
    try {
      if (empty($_GET["number"])) {
        echo '<BR> Pass your payload to a parameter called number on the URL (HTTP GET request) ';
        echo '<BR><p><b>Example:</b>    http://localhost/XSSLabs/lab1.php?number=9999 </p>';
      } else {
        echo '<BR>';

        // Validate input as a number
        $number = $_GET["number"];
        if (!is_numeric($number)) {
          echo 'Invalid input. Please provide a valid number.';
        } else {
          $number = htmlspecialchars($number, ENT_QUOTES, 'UTF-8');

          // Output the sanitized number
          echo "The number you entered is: " . $number;
        }
      }
    } catch (Exception $e) {
      echo '<BR> Pass your payload to a parameter called number on the URL (HTTP GET request) ';
      echo '<BR><p><b>Example:</b>    http://localhost/XSSLabs/lab1.php?number=12345 </p>';
    }
    ?>
  </div>
</div>
<div class="footer">
  <p>Break me first then try fix me....</p>
</div>
</body>
</html>
