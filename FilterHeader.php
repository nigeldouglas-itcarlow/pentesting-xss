<?php

// Set a value for a cookie with a name "TestCookie"
$value = 'This_is_a_Top-Secret_cookie_and_should_never_be_exposed... +++++++ Filter';
setcookie("TestCookie", $value);

// Disable XSS protection headers in the response
header('X-XSS-Protection: 0;');

// Define a function called RemoveXSS to sanitize input
function RemoveXSS($val) 
{
    // Remove control characters and certain character sequences
    $val = preg_replace('/([\x00-\x08][\x0b-\x0c][\x0e-\x20])/', '', $val);

    // Define a set of characters to be sanitized
    $search = 'abcdefghijklmnopqrstuvwxyz';
    $search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $search .= '1234567890!@#$%^&*()';
    $search .= '~`";:?+/={}[]-_|\'\\';

    // Loop through each character in the search set
    for ($i = 0; $i < strlen($search); $i++) 
    {
        // Replace character entities with their original characters
        $val = preg_replace('/(&#[x|X]0{0,8}'.dechex(ord($search[$i])).';?)/i', $search[$i], $val);
        $val = preg_replace('/(&#0{0,8}'.ord($search[$i]).';?)/', $search[$i], $val);
    }

    // Define arrays of potentially harmful HTML and JavaScript keywords
    $ra1 = Array('javascript', 'vbscript', 'expression', 'applet', 'meta',
    'xml', 'blink', 'link', 'style', 'script', 'embed', 'object', 'iframe', 'frame',
    'frameset', 'ilayer', 'layer', 'bgsound', 'title', 'base');
    // Svg was never flagged in the above array. Just need an action not listed below
    $ra2 = Array('onabort', 'onactivate', 'onafterprint', 'onafterupdate',
    'onbeforeactivate', 'onbeforecopy', 'onbeforecut', 'onbeforedeactivate',
    'onbeforeeditfocus', 'onbeforepaste', 'onbeforeprint', 'onbeforeunload',
    'onbeforeupdate', 'onblur', 'onbounce', 'oncellchange', 'onchange', 'onclick',
    'oncontextmenu', 'oncontrolselect', 'oncopy', 'oncut', 'ondataavailable',
    'ondatasetchanged', 'ondatasetcomplete', 'ondblclick', 'ondeactivate', 'ondrag',
    'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop',
    'onerror', 'onerrorupdate', 'onfilterchange', 'onfinish', 'onfocus', 'onfocusin',
    'onfocusout', 'onhelp', 'onkeydown', 'onkeypress', 'onkeyup', 'onlayoutcomplete',
    'onload', 'onlosecapture', 'onmousedown', 'onmouseenter', 'onmouseleave', 
    'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onmove',
    'onmoveend', 'onmovestart', 'onpaste', 'onpropertychange', 'onreadystatechange',
    'onreset', 'onresize', 'onresizeend', 'onresizestart', 'onrowenter', 'onrowexit',
    'onrowsdelete', 'onrowsinserted', 'onscroll', 'onselect', 'onselectionchange',
    'onselectstart', 'onstart', 'onstop', 'onsubmit', 'onunload');
    
    // Combine the two arrays into one
    $ra = array_merge($ra1, $ra2);
    
    // Initialize a flag variable
    $found = true;
    
    // Continue sanitizing until no more patterns are found
    while ($found == true) 
    {
        $val_before = $val;
        
        // Loop through each keyword pattern
        for ($i = 0; $i < sizeof($ra); $i++) 
        {
            $pattern = '/';
            
            // Loop through each character in the keyword pattern
            for ($j = 0; $j < strlen($ra[$i]); $j++) 
            {
                if ($j > 0) 
                {
                    // Add optional character entity checks
                    $pattern .= '(';
                    $pattern .= '(&#[x|X]0{0,8}([9][a][b]);?)?';
                    $pattern .= '|(&#0{0,8}([9][10][13]);?)?';
                    $pattern .= ')?';
                }
                $pattern .= $ra[$i][$j];
            }
            $pattern .= '/i';
            
            // Define a replacement pattern with "x" characters
            $replacement = substr($ra[$i], 0, 2).'<x>'.substr($ra[$i], 2);
            
            // Use regular expression to replace patterns with "x" characters
            $val = preg_replace($pattern, $replacement, $val);
            
            // Check if any replacements were made
            if ($val_before == $val) 
            {
                $found = false;
            }
        }
    }
    
    // Return the sanitized value
    return $val;
}

?>
